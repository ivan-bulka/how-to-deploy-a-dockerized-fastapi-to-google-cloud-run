name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - dev


jobs:
  deploy-api-layer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      
      - name: Set environment vars
        id: set-env-vars
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENV_FILE="prod.yaml"
            echo "Using PROD environment"
          elif [ "${{ github.ref }}" == "refs/heads/dev" ]; then
            ENV_FILE="dev.yaml"
            echo "Using DEV environment"
          else
            echo "Unsupported branch. Exiting."
            exit 1
          fi
      - name: Determine Service Account
        id: determine-service-account
        run: |
          # Set credentials based on determined environment
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            "credentials_json=${{ secrets.GCP_SA_KEY }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/dev" ]; then
            "credentials_json=${{ secrets.GCP_SA_KEY }}" >> $GITHUB_ENV
          fi
          
#          cat $ENV_FILE
#             python -c "import yaml; vars = yaml.safe_load(open('$ENV_FILE')); [print(f'{k}={v}') for k, v in vars.items()]" >> $GITHUB_ENV
#
#      - name: Google Cloud Auth
#        uses: 'google-github-actions/auth@v2'
#        with:
#          credentials_json: '${{ secrets.credentials_json }}'
#          project_id: ${{ env.PROJECT_ID }}
#
#      - name: Set up Cloud SDK
#        uses: 'google-github-actions/setup-gcloud@v2'
#
#      - name: Configure Docker
#        run: |
#          gcloud auth configure-docker us-central1-docker.pkg.dev
#
#      - name: Build and Push Docker Image
#        run: |
#          docker build -t ${{ env.DOCKER_IMAGE_URL }}:latest -f Dockerfile .
#          docker push ${{ env.DOCKER_IMAGE_URL }}:latest
#
#      - name: Deploy to Cloud Run
#        run: |
#          gcloud run deploy $SERVICE_NAME \
#            --image ${{ env.DOCKER_IMAGE_URL }}:latest \
#            --platform managed \
#            --region ${{env.REGION}} \
#            --allow-unauthenticated
#      - name: Generate API_GATEWAY_CONFIG_ID
#        id: uuid
#        run: echo 'API_GATEWAY_CONFIG_ID='`uuidgen | tr '[:upper:]' '[:lower:]'`>> $GITHUB_ENV
#
#      - name: Check the env variables
#        run: env
#
#      - name: Configure API Gateway config
#        run: |
#          gcloud api-gateway api-configs create ${{ env.API_GATEWAY_CONFIG_ID}} \
#            --api=${{ env.API_ID }} \
#            --openapi-spec=${{ env.API_GATEWAY_CONFIG_SPEC }}
#
#      - name: Check the env variables again
#        run: env
#
#      - name: Deploy API Gateway
#        run: |
#          gcloud api-gateway gateways update ${{ env.API_GATEWAY_ID }} \
#            --api=${{ env.API_ID}} \
#            --api-config=${{ env.API_GATEWAY_CONFIG_ID }} \
#            --location=${{ env.REGION }} || \
#
#            gcloud api-gateway gateways create ${{ env.API_GATEWAY_ID }} \
#            --api=${{ env.API_ID}} \
#            --api-config=${{ env.API_GATEWAY_CONFIG_ID }} \
#            --location=${{ env.REGION }}

